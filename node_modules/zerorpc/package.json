{
  "_args": [
    [
      {
        "raw": "zerorpc@github:fyears/zerorpc-node",
        "scope": null,
        "escapedName": "zerorpc",
        "name": "zerorpc",
        "rawSpec": "github:fyears/zerorpc-node",
        "spec": "github:fyears/zerorpc-node",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:fyears/zerorpc-node.git",
          "sshUrl": "git+ssh://git@github.com/fyears/zerorpc-node.git",
          "httpsUrl": "git+https://github.com/fyears/zerorpc-node.git",
          "gitUrl": "git://github.com/fyears/zerorpc-node.git",
          "shortcut": "github:fyears/zerorpc-node",
          "directUrl": "https://raw.githubusercontent.com/fyears/zerorpc-node/master/package.json"
        }
      },
      "/Users/intern/Documents/maddy/horizon_wireless"
    ]
  ],
  "_from": "fyears/zerorpc-node",
  "_id": "zerorpc@0.9.7",
  "_inCache": true,
  "_location": "/zerorpc",
  "_phantomChildren": {},
  "_requested": {
    "raw": "zerorpc@github:fyears/zerorpc-node",
    "scope": null,
    "escapedName": "zerorpc",
    "name": "zerorpc",
    "rawSpec": "github:fyears/zerorpc-node",
    "spec": "github:fyears/zerorpc-node",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:fyears/zerorpc-node.git",
      "sshUrl": "git+ssh://git@github.com/fyears/zerorpc-node.git",
      "httpsUrl": "git+https://github.com/fyears/zerorpc-node.git",
      "gitUrl": "git://github.com/fyears/zerorpc-node.git",
      "shortcut": "github:fyears/zerorpc-node",
      "directUrl": "https://raw.githubusercontent.com/fyears/zerorpc-node/master/package.json"
    }
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "git://github.com/fyears/zerorpc-node.git#4830898121823067e3a38fe809ba8edcf1e8c843",
  "_shasum": "5914665403d3c59906acc64db18a754eb502a8d7",
  "_shrinkwrap": null,
  "_spec": "zerorpc@github:fyears/zerorpc-node",
  "_where": "/Users/intern/Documents/maddy/horizon_wireless",
  "author": {
    "name": "Fran√ßois-Xavier Bourlet",
    "email": "bombela+zerorpc@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/0rpc/zerorpc-node/issues"
  },
  "contributors": [
    {
      "name": "Francois-Xavier Bourlet",
      "email": "bombela@gmail.com"
    },
    {
      "name": "Yusuf Simonson",
      "email": "simonson@gmail.com"
    }
  ],
  "dependencies": {
    "msgpack-lite": "^0.1.26",
    "underscore": "1.3.3",
    "uuid": "^3.0.0",
    "zeromq": "^4.1.1"
  },
  "description": "A port of ZeroRPC to node.js",
  "devDependencies": {
    "nodeunit": "0.9.1",
    "temp": "0.8.1"
  },
  "gitHead": "4830898121823067e3a38fe809ba8edcf1e8c843",
  "homepage": "https://github.com/0rpc/zerorpc-node#readme",
  "keywords": [
    "zerorpc",
    "rpc",
    "distributed",
    "communication"
  ],
  "license": "MIT",
  "main": "./index.js",
  "name": "zerorpc",
  "optionalDependencies": {},
  "readme": "zerorpc-node\n============\n\n[![Build Status](https://travis-ci.org/0rpc/zerorpc-node.svg?branch=master)](https://travis-ci.org/0rpc/zerorpc-node)\n\nZeroRPC is a communication layer for distributed systems. zerorpc-node is a port of the original [ZeroRPC](https://github.com/0rpc/zerorpc-python) for node.js. We have full client and server support for version 3 of the protocol, and clients/servers written in the Python version can communicate transparently with those written in node.js. This project is in alpha.\n\nTo install the package:\n\nMake sure you have [ZeroMQ](https://github.com/zeromq/libzmq) installed.\n\nThen:\n\n```bash\nnpm install zerorpc\n```\n\nIf you get the error `Package libzmq was not found` after making sure ZeroMQ is installed, take a look at [the fix for zeromq.node](https://github.com/JustinTulloss/zeromq.node/issues/55). If you get the error `Unable to load shared library <<path to zeromq.node>>/binding.node`, [make sure you run ldconfig](https://github.com/JustinTulloss/zeromq.node/issues/85). If that still doesn't work, check out [this ticket](https://github.com/JustinTulloss/zeromq.node/issues/92).\n\nServers\n-------\n\nTo create a new server:\n\n```js\nvar zerorpc = require(\"zerorpc\");\nvar server = new zerorpc.Server(context [, heartbeat]);\n```\n\nThe constructor takes in a context object with the functions to expose\nover RPC. Only functions that do not have a leading underscore will be\nexposed. Each exposed method must take in a callback as the last\nargument. This callback is called as `callback(error, response, more)`\nwhen there is a new update, where error is an error object or string,\nresponse is the new update, and more is a boolean specifying whether new\nupdates will be available later. `error`, `response`, and `more` default\nto falsy values, so e.g. simply calling `callback()` closes an open\nstream, since `more` is false by default. Constructor also takes a\nheartbeat parameter that specifies the interval that the server should\nping clinets to let them know it is active.\n\nEvents:\n\n* `error` - When an error occurs.\n\nMethods:\n\n* `bind(endpoint)` - Binds the server to the specified ZeroMQ endpoint.\n* `connect(endpoint)` - Connects the server to the specified ZeroMQ endpoint.\n* `close()` - Closes the ZeroMQ socket.\n\nFull example:\n\n```js\nvar zerorpc = require(\"zerorpc\");\n\nvar server = new zerorpc.Server({\n    addMan: function(sentence, reply) {\n        reply(null, sentence + \", man!\");\n    },\n\n    add42: function(n, reply) {\n        reply(null, n + 42);\n    },\n\n    iter: function(from, to, step, reply) {\n        for(i=from; i<to; i+=step) {\n            reply(null, i, true);\n        }\n\n        reply();\n    }\n});\n\nserver.bind(\"tcp://0.0.0.0:4242\");\n\nserver.on(\"error\", function(error) {\n    console.error(\"RPC server error:\", error);\n});\n```\n\nClients\n-------\n\nTo create a new client:\n\n```js\nvar zerorpc = require(\"zerorpc\");\nvar client = new zerorpc.Client(options);\n```\n\nThe constructor optionally takes in an options object. Allowable options:\n\n* `timeout` (number) - Sets the number of seconds to wait for a response before considering the call timed out. Defaults to 30.\n* `heartbeatInterval` (number) - Sets the number of miliseconds to send send heartbeats to connected servers. Defaults to 5000ms.\n\nEvents:\n\n* `error` - When an error occurs.\n\nMethods:\n\n* `bind(endpoint)` - Binds the client to the specified ZeroMQ endpoint.\n* `connect(endpoint)` - Connects the client to the specified ZeroMQ endpoint.\n* `close()` - Closes the ZeroMQ socket.\n* `invoke(method, arguments..., callback)` - Invokes a remote method.\n  * `method` is the method name.\n  * `arguments` are a list of arguments passed to the method, if there are no arguments then this argument is ommitted\n  * `callback` is a method to call when there is an update. This callback is called as `callback(error, response, more)`, where error is an error object, response is the new update, and more is a boolean specifying whether new updates will be available later (i.e. whether the response is streaming).\n\nFull example:\n\n```js\nvar zerorpc = require(\"zerorpc\");\n\nvar client = new zerorpc.Client();\nclient.connect(\"tcp://127.0.0.1:4242\");\n\nclient.on(\"error\", function(error) {\n    console.error(\"RPC client error:\", error);\n});\n\nclient.invoke(\"iter\", 10, 20, 2, function(error, res, more) {\n    if(error) {\n        console.error(error);\n    } else {\n        console.log(\"UPDATE:\", res);\n    }\n\n    if(!more) {\n        console.log(\"Done.\");\n    }\n});\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/0rpc/zerorpc-node.git"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "version": "0.9.7"
}
